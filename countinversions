import java.util.* ;
import java.io.*; 
public class Solution {
    static int count=0;
    public static long getInversions(long arr[], int n) {
        mergeSort(arr,n);
        return count;
    }

    public static void mergeSort(long[] arr, int n) 
	{
		ms(arr,0,n-1);
		
	}

	public static void ms(long[] arr, int low, int high)
	{
		if(low>=high)
		{
			return;
		}

		int mid=(low+high)/2;
		ms(arr,low,mid);
		ms(arr,mid+1,high);
		merge(arr,low,mid,high);
	}

	public static void merge(long[] arr,int low, int mid, int high)
	{
		ArrayList<Long> temp=new ArrayList<>();
		int left=low;
		int right=mid+1;

		while(left<=mid && right<=high)
		{
			if(arr[left]<=arr[right])
			{
				temp.add(arr[left]);
				left++;
			}

			else
			{
				temp.add(arr[right]);
                count+=(mid-left+1);
				right++;
			}
		}

		while(left<=mid)
		{
			temp.add(arr[left]);
			left++;
		}

		while(right<=high)
		{
			temp.add(arr[right]);
			right++;
		}

		for(int i=low;i<=high;i++)
		{
			arr[i]=temp.get(i-low);
		}
	}
}
